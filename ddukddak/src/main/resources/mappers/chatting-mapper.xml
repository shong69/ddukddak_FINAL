<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ddukddak.common.chatting.model.mapper.ChattingMapper">
	
	<!-- 채팅방 목록 조회 -->
	<select id ="selectRoomList">
		SELECT
		    R.CHATTING_NO,
		    
		    (SELECT MESSAGE_CONTENT
		     FROM (
		         SELECT *
		         FROM MESSAGE M2
		         WHERE M2.CHATTING_NO = R.CHATTING_NO
		         ORDER BY M2.MESSAGE_NO DESC
		     )
		     WHERE ROWNUM = 1) AS LAST_MESSAGE,
		     
		    TO_CHAR(NVL(
		        (SELECT MAX(M.SEND_TIME)
		         FROM MESSAGE M
		         WHERE R.CHATTING_NO = M.CHATTING_NO),
		        R.CH_CREATE_DATE
		    ), 'YYYY.MM.DD') AS SEND_TIME,
		    
		    CASE
		        WHEN EXISTS (
		            SELECT 1
		            FROM CHATTING_ROOM R2
		            WHERE R2.CHATTING_NO = R.CHATTING_NO
		              AND R2.OPEN_MEMBER_NO = #{memberNo}
		        ) THEN R.PARTICIPANT_CONTRACTOR_NO
		        WHEN EXISTS (
		            SELECT 1
		            FROM CHATTING_ROOM R2
		            WHERE R2.CHATTING_NO = R.CHATTING_NO
		              AND R2.OPEN_CONTRACTOR_NO = #{memberNo}
		        ) THEN R.PARTICIPANT_MEMBER_NO
		        ELSE NULL
		    END AS TARGET_NO,
		    
		    CASE
		        WHEN EXISTS (
		            SELECT 1
		            FROM CHATTING_ROOM R2
		            WHERE R2.CHATTING_NO = R.CHATTING_NO
		              AND R2.OPEN_MEMBER_NO = #{memberNo}
		        ) THEN
		        	(SELECT PARTNER_BUSINESS_NAME
		             FROM PARTNER
		             WHERE PARTNER_NO = R.PARTICIPANT_CONTRACTOR_NO)       
		        WHEN EXISTS (
		            SELECT 1
		            FROM CHATTING_ROOM R2
		            WHERE R2.CHATTING_NO = R.CHATTING_NO
		              AND R2.OPEN_CONTRACTOR_NO = #{memberNo}
		        ) THEN
		            (SELECT MEMBER_NICKNAME
		             FROM MEMBER
		             WHERE MEMBER_NO = R.PARTICIPANT_MEMBER_NO)
		        ELSE NULL
		    END AS TARGET_NICKNAME,
		    
		    CASE
		        WHEN EXISTS (
		            SELECT 1
		            FROM CHATTING_ROOM R2
		            WHERE R2.CHATTING_NO = R.CHATTING_NO
		           	AND R2.OPEN_MEMBER_NO = #{memberNo}
		        ) THEN
		            N'기본이미지 사용'
		        WHEN EXISTS (
		            SELECT 1
		            FROM CHATTING_ROOM R2
		            WHERE R2.CHATTING_NO = R.CHATTING_NO
		              AND R2.OPEN_CONTRACTOR_NO = #{memberNo}
		        ) THEN
		            (SELECT PROFILE_IMG
		             FROM MEMBER
		             WHERE MEMBER_NO = R.PARTICIPANT_MEMBER_NO)
		        ELSE NULL
		    END AS TARGET_PROFILE,
		    
		    (SELECT COUNT(*)
		     FROM MESSAGE M
		     WHERE M.CHATTING_NO = R.CHATTING_NO
		       AND M.READ_FL = 'N'
		       AND  (
		       			(M.SENDER_MEMBER_NO != #{memberNo}  AND M.SENDER_MEMBER_NO IS NULL)
		       			OR 
		       			(M.SENDER_CONTRACTOR_NO != #{memberNo} AND M.SENDER_CONTRACTOR_NO IS NULL)
		     )) AS NOT_READ_COUNT,
		    
		     
		    (SELECT MAX(MESSAGE_NO)
		     FROM MESSAGE M
		     WHERE R.CHATTING_NO = M.CHATTING_NO) AS MAX_MESSAGE_NO
		     
		FROM
		    CHATTING_ROOM R
		WHERE
		    (R.OPEN_MEMBER_NO = #{memberNo} OR R.OPEN_CONTRACTOR_NO = #{memberNo})
		    OR (R.PARTICIPANT_MEMBER_NO = #{memberNo} OR R.PARTICIPANT_CONTRACTOR_NO =#{memberNo})
		ORDER BY
		    MAX_MESSAGE_NO DESC NULLS LAST;

	</select>
	
	<!-- [일반회원]채팅 상대 검색 -->
	<select id="selectTarget">
		SELECT PARNER_NO, PARTNER_TEL, PARTNER_BUSINESS_NAME, '기본이미지'  FROM "PARTNER"
		WHERE (PARTNER_TEL LIKE '%${query}%' OR PARTNER_BUSINESS_NAME LIKE '%${query}%')
		AND PARTNER_DEL_FL = 'N'
	</select>
	
	<!-- [일반회원]채팅 확인 -->
	<select id="checkChattingNo">
		SELECT NVL(SUM(CHATTING_NO),0) CHATTING_NO FROM CHATTING_ROOM
		WHERE (OPEN_MEMBER_NO = #{memberNo} AND PARTICIPANT_CONTRACTOR_NO = #{targetNo})
		OR (OPEN_CONTRACTOR_NO = #{targetNo} AND PARTICIPANT_MEMBER_NO = #{memberNo})
	</select>
	
	<!-- [일반회원]채팅방 만들기 -->
	<insert id = "createChattingRoom" parameterType="map" useGeneratedKeys="true">
		<selectKey keyProperty= "chattingNo" order="BEFORE" resultType="_int">
			SELECT SEQ_ROOM_NO.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO CHATTING_ROOM
		VALUES(SEQ_ROOM_NO.NEXTVAL, SYSDATE, #{memberNo}, NULL, NULL, #{targetNo})
	</insert>
	
	<!-- [일반회원]채팅 기록 불러오기 -->
	<select id="selectMessageList">
		SELECT MESSAGE_NO, MESSAGE_CONTENT, READ_FL, SENDER_NO, CHATTING_NO,
		TO_CHAR(SEND_TIME, 'YYYY.MM.DD HH24:MI') SEND_TIME 
		FROM MESSAGE
		WHERE CHATTING_NO  = #{chattingNo}
		ORDER BY MESSAGE_NO
	</select>
	
	<!-- 읽음 상태 변경 -->
	<update id = "updateReadFlag">
		UPDATE "MESSAGE" SET
		READ_FL = 'Y'
		WHERE CHATTING_NO = #{chattingNo}
		AND SENDER_NO != #{memberNo}
	</update>
	<!-- 메시지 보내기 -->
	<insert id = "insertMessage">
		INSERT INTO "MESSAGE"
		VALUES(SEQ_MESSAGE_NO.NEXTVAL, #{messageContent}, DEFAULT, DEFAULT, #{senderNo}, #{chattingNo})
	</insert>
</mapper>
