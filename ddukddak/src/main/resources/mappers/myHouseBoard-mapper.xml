<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ddukddak.board.model.mapper.MyHouseBoardMapper">



	<resultMap type="Board" id="board_rm">
	
		<!-- id 태그 : PK 역할을 하는 컬럼, 필드를 작성하는 태그 -->
		<id property="boardNo" column="BOARD_NO"/>
		
		<!-- 
			<< collection 태그 >>
			select로 조회된 결과를 컬렉션(List)에 담아
			지정된 필드에 세팅
			
			property : List를 담을 DTO의 필드명
			select : 실행할 select의 id
			column : 조회 결과 중 지정된 컬럼의 값을 파라미터로 전달
			javaType : List(컬렉션)의 타입을 지정
			ofType : List(컬렉션)의 제네릭(타입 제한) 지정
		-->
		
		<!-- 해당 게시글 이미지 목록 조회 후 필드에 저장 -->
		<collection property="imageList" 
					select="selectImageList"
					column="BOARD_NO"
					javaType="java.util.ArrayList"
					ofType="BoardImg"/>
	
		<!-- 해당 게시글 댓글 목록 조회 후 필드에 저장 -->
		<collection property="commentList"
					select="selectCommentList"
					column="BOARD_NO"
					javaType="java.util.ArrayList"
					ofType="Comment" />
	</resultMap>



	
	<!-- 집들이 게시글 작성 -->
	<insert id="boardInsert" useGeneratedKeys="true" parameterType="Board">
		
		<selectKey order="BEFORE" resultType="_int" keyProperty="boardNo">
			SELECT SEQ_BOARD_NO.NEXTVAL FROM DUAL
		</selectKey>
		
		INSERT INTO "COMMUNITY"
		VALUES ( #{boardNo},
				 #{boardTitle},
				 #{boardContent},
				 DEFAULT,
				 NULL,
				 DEFAULT,
				 DEFAULT,
				 #{memberNo},
				 1)
		
	</insert>
	
	<!-- 게시글 이미지 삽입 -->
	<insert id="insertUploadList" parameterType="list">
		
		INSERT INTO "UPLOAD_FILE"
		
		<foreach collection="list" item="img"
				open="(" close=")" separator=" UNION ">
		
		
				SELECT NEXT_UPLOAD_IMG_NO(),
					   #{img.uploadImgPath},
					   #{img.uploadImgOgName},
					   #{img.uploadImgRename},
					   #{img.uploadImgOrder},
					   3,
					   NULL,
					   #{img.boardNo},
					   NULL,
					   NULL
			  	FROM DUAL
				   
		</foreach>
		
	</insert>
	
	<!-- 집들이 게시판 조회 -->
	<select id="selectMyHouseList">
		SELECT BOARD_NO, BOARD_TITLE, MEMBER_NICKNAME, READ_COUNT,
		(SELECT UPLOAD_IMG_PATH || UPLOAD_IMG_RENAME FROM "UPLOAD_FILE" U WHERE C.BOARD_NO = U.BOARD_NO AND UPLOAD_IMG_ORDER = 0) THUMBNAIL,
		(SELECT COUNT(*) FROM "COMMENT" C WHERE C.BOARD_NO = C.BOARD_NO) COMMENT_COUNT,
		(SELECT COUNT(*) FROM "BOARD_LIKE" L WHERE L.BOARD_NO = C.BOARD_NO) LIKE_COUNT,
		<![CDATA[
		CASE
			WHEN SYSDATE - BOARD_WRITE_DATE < 1 / 24 / 60 
			THEN FLOOR((SYSDATE - BOARD_WRITE_DATE) * 24 * 60 * 60 ) || '초 전'
			WHEN SYSDATE - BOARD_WRITE_DATE < 1 / 24
			THEN FLOOR((SYSDATE - BOARD_WRITE_DATE) * 24 * 60 ) || '분 전'
			WHEN SYSDATE - BOARD_WRITE_DATE < 1
			THEN FLOOR((SYSDATE - BOARD_WRITE_DATE) * 24 ) || '시간 전'
			ELSE TO_CHAR(BOARD_WRITE_DATE, 'YYYY-MM-DD')
		END BOARD_WRITE_DATE
		]]>
		FROM "COMMUNITY" C
		JOIN "MEMBER" USING (MEMBER_NO)
		WHERE BOARD_DEL_FL = 'N'
		AND MEMBER_DEL_FL = 'N'
		AND BOARD_CODE = #{boardCode}
		ORDER BY 
			<choose>
            <when test="sort == 'latest'">
                BOARD_NO DESC
            </when>
            <when test="sort == 'views'">
                READ_COUNT DESC
            </when>
            <when test="sort == 'likeCount'">
                LIKE_COUNT DESC
            </when>
            <otherwise>
                BOARD_NO DESC
            </otherwise>
        </choose>
	</select>
	
	
	<!-- 게시글 수 조회 -->
	<select id="getListCount">
		SELECT COUNT(*) FROM "COMMUNITY"
		WHERE BOARD_DEL_FL = 'N'
		AND BOARD_CODE = #{boardCode}
	</select>
	
	
	<!-- 검색 조건에 맞는 게시글 수 조회 -->
	<select id="getSearchCount">
		SELECT COUNT(*) FROM COMMUNITY
		JOIN "MEMBER" USING (MEMBER_NO)
		WHERE BOARD_DEL_FL = 'N'
		AND BOARD_CODE = #{boardCode}
		AND (BOARD_TITLE LIKE '%' || #{query} || '%' OR MEMBER_NICKNAME LIKE '%' || #{query} || '%')	  
	</select>
	
	
	<!-- 검색 결과 목록 조회 -->
	<select id="selectSearchList">
		SELECT BOARD_NO, BOARD_TITLE, MEMBER_NICKNAME, READ_COUNT,
		(SELECT UPLOAD_IMG_PATH || UPLOAD_IMG_RENAME FROM "UPLOAD_FILE" U WHERE C.BOARD_NO = U.BOARD_NO AND UPLOAD_IMG_ORDER = 0) THUMBNAIL,
		(SELECT COUNT(*) FROM "COMMENT" C WHERE C.BOARD_NO = C.BOARD_NO) COMMENT_COUNT,
		(SELECT COUNT(*) FROM "BOARD_LIKE" L WHERE L.BOARD_NO = C.BOARD_NO) LIKE_COUNT,
		<![CDATA[
		CASE
			WHEN SYSDATE - BOARD_WRITE_DATE < 1 / 24 / 60 
			THEN FLOOR((SYSDATE - BOARD_WRITE_DATE) * 24 * 60 * 60 ) || '초 전'
			WHEN SYSDATE - BOARD_WRITE_DATE < 1 / 24
			THEN FLOOR((SYSDATE - BOARD_WRITE_DATE) * 24 * 60 ) || '분 전'
			WHEN SYSDATE - BOARD_WRITE_DATE < 1
			THEN FLOOR((SYSDATE - BOARD_WRITE_DATE) * 24 ) || '시간 전'
			ELSE TO_CHAR(BOARD_WRITE_DATE, 'YYYY-MM-DD')
		END BOARD_WRITE_DATE
		]]>
		FROM "COMMUNITY" C
		JOIN "MEMBER" USING (MEMBER_NO)
		WHERE BOARD_DEL_FL = 'N'
		AND BOARD_CODE = #{boardCode}
		AND (BOARD_TITLE LIKE '%' || #{query} || '%' OR MEMBER_NICKNAME LIKE '%' || #{query} || '%')
		ORDER BY
			<choose>
	            <when test="sort == 'latest'">
	                BOARD_NO DESC
	            </when>
	            <when test="sort == 'views'">
	                READ_COUNT DESC
	            </when>
	            <when test="sort == 'likeCount'">
	                LIKE_COUNT DESC
	            </when>
	            <otherwise>
	                BOARD_NO DESC
	            </otherwise>
        </choose>
	</select>
	
	
	<!-- 게시글 상세조회 -->
	<select id="selectBoard" resultMap="board_rm">
		SELECT BOARD_NO, BOARD_TITLE, BOARD_CONTENT, MEMBER_NO, MEMBER_NICKNAME, READ_COUNT, PROFILE_IMG,
				TO_CHAR(BOARD_WRITE_DATE, 'YYYY"-"MM"-"DD HH24:MI:SS') BOARD_WRITE_DATE,
				TO_CHAR(BOARD_UPDATE_DATE, 'YYYY"-"MM"-"DD HH24:MI:SS') BOARD_UPDATE_DATE,
				
				(SELECT COUNT(*) FROM "BOARD_LIKE"
				WHERE BOARD_NO = #{boardNo}) LIKE_COUNT,
				
				(SELECT COUNT(*) FROM "BOARD_LIKE"
				WHERE MEMBER_NO = #{memberNo}
				AND BOARD_NO = #{boardNo}) LIKE_CHECK
		
		FROM "COMMUNITY"
		JOIN "MEMBER" USING (MEMBER_NO)
		WHERE BOARD_DEL_FL = 'N'
		AND BOARD_NO = #{boardNo}
	</select>
	
	<!-- 조회수 1 증가 -->
	<update id="updateReadCount">
		UPDATE "COMMUNITY" SET READ_COUNT = READ_COUNT + 1
		WHERE BOARD_NO = #{boardNo}
	</update>
	
	<!-- 조회수 조회 -->
	<select id="selectReadCount">
		SELECT READ_COUNT FROM "COMMUNITY"
		WHERE BOARD_NO = #{boardNo}
	</select>
	
	<!-- 상세조회한 게시글의 이미지 리스트 조회 -->
	<select id="selectImageList" resultType="BoardImg">
		SELECT * FROM "UPLOAD_FILE" 
		WHERE BOARD_NO = #{boardNo}
		ORDER BY UPLOAD_IMG_ORDER
	</select>
	
	
	<!-- 상세 조회한 게시글의 댓글 목록 조회 -->
	<select id="selectCommentList" resultType="Comment">
		SELECT LEVEL, C.* FROM
		(SELECT COMMENT_NO, COMMENT_CONTENT,
				    BOARD_NO, MEMBER_NO, MEMBER_NICKNAME, PROFILE_IMG, PARENT_COMMENT_NO, COMMENT_DEL_FL,
				    <![CDATA[
						CASE
							WHEN SYSDATE - COMMENT_WRITE_DATE < 1 / 24 / 60 
							THEN FLOOR((SYSDATE - COMMENT_WRITE_DATE) * 24 * 60 * 60 ) || '초 전'
							WHEN SYSDATE - COMMENT_WRITE_DATE < 1 / 24
							THEN FLOOR((SYSDATE - COMMENT_WRITE_DATE) * 24 * 60 ) || '분 전'
							WHEN SYSDATE - COMMENT_WRITE_DATE < 1
							THEN FLOOR((SYSDATE - COMMENT_WRITE_DATE) * 24 ) || '시간 전'
							ELSE TO_CHAR(COMMENT_WRITE_DATE, 'YYYY-MM-DD')
						END COMMENT_WRITE_DATE
					]]>
				FROM "COMMENT"
				JOIN MEMBER USING(MEMBER_NO)
				WHERE BOARD_NO = #{boardNo}) C
		WHERE COMMENT_DEL_FL = 'N'
		
		OR 0 != (SELECT COUNT(*) FROM "COMMENT" SUB
						WHERE SUB.PARENT_COMMENT_NO = C.COMMENT_NO
						AND COMMENT_DEL_FL = 'N')
		
		START WITH PARENT_COMMENT_NO IS NULL
		CONNECT BY PRIOR COMMENT_NO = PARENT_COMMENT_NO
		ORDER SIBLINGS BY COMMENT_NO
	</select>
	
	
	
	<!-- 메인페이지용 집들이 게시판 조회 -->
	<select id="selectMyHouseList2">
		SELECT *
		FROM (
		    SELECT 
		        BOARD_NO, 
		        BOARD_TITLE, 
		        MEMBER_NICKNAME, 
		        READ_COUNT,
		        (SELECT UPLOAD_IMG_PATH || UPLOAD_IMG_RENAME 
		         FROM "UPLOAD_FILE" U 
		         WHERE C.BOARD_NO = U.BOARD_NO AND UPLOAD_IMG_ORDER = 0) AS THUMBNAIL,
		        (SELECT COUNT(*) 
		         FROM "COMMENT" C 
		         WHERE C.BOARD_NO = C.BOARD_NO) AS COMMENT_COUNT,
		        (SELECT COUNT(*) 
		         FROM "BOARD_LIKE" L 
		         WHERE L.BOARD_NO = C.BOARD_NO) AS LIKE_COUNT,
		         <![CDATA[
		        CASE
		            WHEN SYSDATE - BOARD_WRITE_DATE < 1 / 24 / 60 
		            THEN FLOOR((SYSDATE - BOARD_WRITE_DATE) * 24 * 60 * 60 ) || '초 전'
		            WHEN SYSDATE - BOARD_WRITE_DATE < 1 / 24
		            THEN FLOOR((SYSDATE - BOARD_WRITE_DATE) * 24 * 60 ) || '분 전'
		            WHEN SYSDATE - BOARD_WRITE_DATE < 1
		            THEN FLOOR((SYSDATE - BOARD_WRITE_DATE) * 24 ) || '시간 전'
		            ELSE TO_CHAR(BOARD_WRITE_DATE, 'YYYY-MM-DD')
		        END AS BOARD_WRITE_DATE
		        ]]>
		    FROM "COMMUNITY" C
		    JOIN "MEMBER" USING (MEMBER_NO)
		    WHERE BOARD_DEL_FL = 'N'
		    AND BOARD_CODE = 1
					ORDER BY BOARD_NO DESC
				)
				<![CDATA[
				WHERE ROWNUM <= 3
				]]>
	</select>
	
	
	<!-- 집들이 게시글 삭제 -->
	<update id="deleteMyHouse">
		UPDATE "COMMUNITY" SET BOARD_DEL_FL = 'Y'
		WHERE BOARD_NO = #{boardNo}
	</update>
	
	<!-- 집들이 게시글 내용 수정 -->
	<!-- <update id="updateMyHouse">
		UPDATE "COMMUNITY" SET
		BOARD_TITLE = #{boardTitle},
		BOARD_CONTENT = #{boardContent}
		WHERE BOARD_NO = #{boardNo}
	</update> -->
	
	<!-- 집들이 게시글 이미지 수정 -->
	<!-- <update id="updateImage">
		UPDATE "UPLOAD_FILE" SET
		UPLOAD_IMG_OG_NAME = #{uploadImgOgName},
		UPLOAD_IMG_RENAME = #{uploadImgRename}
		WHERE PROJECT_NO = #{boardNo}
		AND UPLOAD_IMG_ORDER = #{uploadImgOrder}
	</update> -->
	
	
	
	
	
	 <update id="updateBoard">
        UPDATE board
        SET board_title = #{boardTitle},
            board_content = #{boardContent}
        WHERE board_no = #{boardNo}
    </update>

    <delete id="deleteImagesByBoardNo">
        DELETE FROM image
        WHERE board_no = #{boardNo}
    </delete>

    <insert id="insertImage">
        INSERT INTO image (board_no, upload_img_path, upload_img_rename, upload_img_og_name)
        VALUES (#{boardNo}, #{uploadImgPath}, #{uploadImgRename}, #{uploadImgOgName})
    </insert>
	
</mapper>


















